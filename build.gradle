buildscript {
    repositories {
        mavenCentral()
            maven {
                name = "forge"
                    url = "http://files.minecraftforge.net/maven"
            }
        maven {
            name = "sonatype"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}


repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
            url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff 
        name 'CB Repo'
            url "http://chickenbones.net/maven/"
    }
}


apply plugin: 'forge'

dependencies {
    println(" Downloading dependencies!")
        // print(" - CCL")
        // ant.get(src: 'http://files.minecraftforge.net/maven/codechicken/CodeChickenLib/1.7.2-1.1.1.80/CodeChickenLib-1.7.2-1.1.1.80-dev.jar', dest: 'dep')
        // file("dep/CodeChickenLib-1.7.2-1.1.1.80-dev.jar").renameTo(file("dep/ccl.jar"))
        // println(" Done")

        // print(" - CCC")
        // ant.get(src: "http://www.chickenbones.craftsaddle.org/Files/New_Versions/1.7.2/CodeChickenCore-1.7.2-1.0.0-dev.jar", dest: 'dep')
        // file("dep/CodeChickenCore-1.7.2-1.0.0-dev.jar").renameTo(file("dep/ccc.jar"))
        // println(" Done")

        // print(" - NEI")
        // ant.get(src: "http://www.chickenbones.craftsaddle.org/Files/New_Versions/1.7.2/NotEnoughItems-1.7.2-1.0.1-dev.jar", dest: "dep")
        // file("dep/NotEnoughItems-1.7.2-1.0.1-dev.jar").renameTo(file("dep/nei.jar"))
        // println(" Done")

        // print(" - FMP")
        // ant.get(src: "http://files.minecraftforge.net/maven/codechicken/ForgeMultipart/1.7.2-1.1.0.282/ForgeMultipart-1.7.2-1.1.0.282-dev.jar", dest: "dep")
        // file("dep/ForgeMultipart-1.7.2-1.1.0.282-dev.jar").renameTo(file("dep/fmp.jar"))
        // println(" Done")

        compile "codechicken:ForgeMultipart:1.7.2-1.1.0.289:dev"
        compile "mcp.mobius.waila:Waila:1.5.2a"

        println(" Adding dependencies!")
        // compile files("dep/ccl.jar")
        // compile files("dep/ccc.jar")
        // compile files("dep/nei.jar")
        // compile files("dep/fmp.jar")
        println(" Finished adding dependencies!")
}



// some crazy stuff to make sure the chicken stuff is in the mods folder...
// because it wont work otherwise... because FML doesnt laod coremods from the classpath
//task copyChicken(type: Copy, dependsOn: "extractUserDev") {
//    from { configurations.compile }
//    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar", "**/ForgeMultipart*.jar"
//        exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
//        into file(minecraft.assetDir + "/../mods") // paralell to the assets dir

//        mustRunAfter "deobfBinJar"
//        mustRunAfter "repackMinecraft"
//}
//tasks.setupDevWorkspace.dependsOn copyChicken
//tasks.setupDecompWorkspace.dependsOn copyChicken


version = "2.0.3"
group= "k4unl.minecraft.Hydraulicraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "HydCraft"

project.ext {
    buildNum = System.getenv("BUILD_NUMBER")
    mcVersion = "1.7.10"
}

minecraft {
    version = "${project.ext.mcVersion}-10.13.0.1179"
//        assetDir = "../Minecraft/assets"

        // replacing stuff in the source
        replace '@VERSION@', project.version
        replace '@MC_VERSION@', version
        replace '@BUILD_NUMBER@', project.ext.buildNum
}


// configure the source folders
sourceSets {
    main {
        java {
            srcDir 'java'
                // exclude 'some exclusion'
                // include 'some inclusion'
        }
        resources {
            srcDir 'resources'
                exclude '**/.md' // exclude readme from localization repo
                // exclude 'some exclusion'
                // include 'some inclusion'
        }
    }
    api {
        java {
            srcDir 'api'
		    srcDir '../IGWMod/src'
        }
    }

}


processResources
{
    inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version
            inputs.property "buildNum", project.ext.buildNum
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

            // replace version and mcversion
            expand 'version':project.version, 'mcversion':project.minecraft.version, 'buildNum':project.ext.buildNum
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    //This makes sure that it gets run EVERY time
    outputs.upToDateWhen {false}
}


jar {
    classifier = "${project.ext.mcVersion}-${project.ext.buildNum}"
}
